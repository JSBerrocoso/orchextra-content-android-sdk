apply plugin: 'com.android.library'
apply from: 'jacoco.gradle'
apply from: 'sonarqube.gradle'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.github.dcendents.android-maven'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply from: 'variants.gradle'

group = rootProject.ext.group
version = rootProject.ext.version

def OCM_DIMENSION = "ocm"
def CONCURRENT_INTERACTORS = "CONCURRENT_INTERACTORS"
def RETROFIT_LOG = "RETROFIT_LOG"
def API_URL = "API_URL"
def OCM_SDK_VERSION = "OCM_SDK_VERSION"
def YOUTUBE_DEVELOPER_KEY = "YOUTUBE_DEVELOPER_KEY"
def VIMEO_ACCESS_TOKEN = "VIMEO_ACCESS_TOKEN"

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode generateAutoVersionCode()
        versionName version

        configurations {
            compile.exclude group: "org.jetbrains", module: "annotations"
        }
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    packagingOptions {
        exclude 'lib/mips/*'
        exclude 'lib/mips64/*'
        exclude 'lib/x86/*'
        exclude 'lib/x86_64/*'
        exclude 'lib/armeabi/*'
        exclude 'lib/arm64-v8a/*'
    }

    buildTypes {
        staging {
            debuggable true
            //      testCoverageEnabled = true
        }
        debug {
            debuggable true
            //      testCoverageEnabled = true
        }
        release {
            debuggable true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            signingConfig null
        }
    }

    project.android.libraryVariants.all { variant ->
        variant.productFlavors.each { flavor ->
            setVariantBuildConfigField(variant, apiOcm, API_URL, STRING)
            setVariantBuildConfigField(variant, version, OCM_SDK_VERSION, STRING)
            setVariantBuildConfigField(variant, concurrentInteractors, CONCURRENT_INTERACTORS, INT)
            setVariantBuildConfigField(variant, retrofitLog, RETROFIT_LOG, BOOLEAN)
            setVariantBuildConfigField(variant, youtubeDeveloperKey, YOUTUBE_DEVELOPER_KEY, STRING)
            setVariantBuildConfigField(variant, vimeoAccessToken, VIMEO_ACCESS_TOKEN, STRING)
            println("flavor: " + flavor.name)
            println("--**********************************************************--")
        }
    }

    lintOptions {
        quiet true
        abortOnError false
        ignoreWarnings true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8 //this is 4 rx, no problem with ox 1_7
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }


    flavorDimensions OCM_DIMENSION

    productFlavors {
        ocm {
            dimension OCM_DIMENSION
        }
    }


    //true to publish all flavour artifacts
    // publishNonDefault true
    defaultPublishConfig "ocmRelease"
    //defaultPublishConfig "ocmDebug"
    //defaultPublishConfig {"ocmRelease","ocmDebug","ocmStaging"}
}

jacocoAndroidUnitTestReport {
    excludes += ['**/BuildConfig*.*']
}

//configurations {
//  ocmReleaseImplementation
//  ocmStagingImplementation
//  ocmDebugImplementation
//}

//if (android.productFlavors.size() > 0) {
//    android.libraryVariants.all { variant ->
//        // Publish a main artifact, otherwise the maven pom is not generated
//        //if( variant.name == android.defaultPublishConfig ) {
//        def bundleTask = tasks["bundle${name.capitalize()}"]
//        artifacts {
//            println('BUNDLE!' + bundleTask.archivePath)
//            println('classifier!' + variant.name)
//            println('builtBy!' + bundleTask.name)
//            archives(bundleTask.archivePath) {
//                classifier variant.name
//                builtBy bundleTask
//            }
//        }
//    }
//    //}
//}

task finalize {
    doFirst {
        tasks.assembleOcmDebug.execute()
        tasks.assembleOcmRelease.execute()
        tasks.assembleOcmStaging.execute()
    }

    println('finally!')
}
finalize.dependsOn(ocmsdk: install)
install.dependsOn(ocmsdk: build)

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar']) //youtube

    //google Support/CustomTabs/playServices
    implementation project.libraries.androidSupportDesign
    implementation project.libraries.androidCustomtabs

    implementation project.libraries.playServicesBase
    implementation project.libraries.playServicesLocation
    implementation project.libraries.playServicesGcm

    //gigigo Lib
    implementation project.libraries.ggglib
    implementation project.libraries.gggJavaLib

    //Dagger
    kapt 'com.squareup:javapoet:1.8.0'
    //Dagger 2.2 bundles an older version of JavaPoet. Must explicitly add apt 'com.squareup:javapoet:1.7.0' before apt 'com.google.dagger:dagger-compiler:2.2' to fix this.
    implementation project.libraries.dagger
    kapt project.libraries.daggerCompiler

    //Image Loader Glide/Blur
    implementation project.libraries.glide

    // ORCHEXTRA
    stagingImplementation project.libraries.oxCoreStaging
    debugImplementation project.libraries.oxCoreDebug
    releaseImplementation project.libraries.oxCoreRelease

    stagingImplementation project.libraries.oxGeofenceStaging
    debugImplementation project.libraries.oxGeofenceDebug
    releaseImplementation project.libraries.oxGeofenceRelease

    stagingImplementation project.libraries.oxIndoorpositioningStaging
    debugImplementation project.libraries.oxIndoorpositioningDebug
    releaseImplementation project.libraries.oxIndoorpositioningRelease

    stagingImplementation project.libraries.oxScannerStaging
    debugImplementation project.libraries.oxScannerDebug
    releaseImplementation project.libraries.oxScannerRelease

    // Customs Views
    implementation project.libraries.doubleViewPager
    implementation project.libraries.autofitTextView
    implementation project.libraries.multipleGridRecyclerView
    implementation project.libraries.baserecycleradapter

    implementation project.libraries.rxAndroid
    implementation project.libraries.rxJava
    implementation project.libraries.rxRetrofit
    implementation project.libraries.arrow

    implementation project.libraries.kache
    implementation project.libraries.timber

    implementation project.libraries.kotlinStdLib
    implementation project.libraries.coroutinesCore
    implementation project.libraries.coroutinesAndroid

    kapt project.libraries.archLifecycleCompiler
    kapt project.libraries.archPersistenceCompiler
    implementation project.libraries.archLifecycleExtensions
    implementation project.libraries.archPersistenceRuntime
    implementation project.libraries.archPersistenceRxJava2

    implementation project.libraries.gpuImage //4 read articles
    implementation project.libraries.vimeoNetworking
    implementation project.libraries.retrofit
    implementation project.libraries.okhttp3
    implementation project.libraries.loggingInterceptor
    implementation project.libraries.exoplayer

    // Modules
    implementation project.modules.vimeo

    //TEST
    testImplementation project.libraries.archPersistenceTesting
    testImplementation project.testLibraries.junit
    testImplementation project.testLibraries.assertj
    testImplementation project.testLibraries.mockito
}

