apply plugin: 'com.android.library'
apply from: 'jacoco.gradle'
apply from: 'sonarqube.gradle'

apply from: 'common_methods.gradle'
apply from: 'dependencies.gradle'
apply plugin: 'me.tatarka.retrolambda'

apply plugin: 'com.github.dcendents.android-maven'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

group = 'com.github.Orchextra'
version = 'ocmVersion'


apply from: 'variants.gradle'

def CONCURRENT_INTERACTORS = "CONCURRENT_INTERACTORS"
def RETROFIT_LOG = "RETROFIT_LOG"

def API_URL = "API_URL"
def OCM_SDK_VERSION = "OCM_SDK_VERSION"

def YOUTUBE_DEVELOPER_KEY = "YOUTUBE_DEVELOPER_KEY"

def VIMEO_ACCESS_TOKEN = "VIMEO_ACCESS_TOKEN"
android {
  compileSdkVersion project.androidCompileSdkVersion
  buildToolsVersion project.androidBuildToolsVersion

  defaultConfig {
    minSdkVersion project.androidMinSdkVersion
    targetSdkVersion project.androidTargetSdkVersion
    versionCode 1
    versionName "1.0"
    //asv mandatory for realm(not exits realm.so version for mips64, armeabi
    ndk {
      abiFilters "armeabi-v7a", "x86_64", "x86", "mips", "arm64-v8a"
    }
    configurations {
      compile.exclude group: "org.jetbrains", module: "annotations"
    }
    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
  }
  buildTypes {
    staging {
      debuggable true
      //      testCoverageEnabled = true
    }
    debug {
      debuggable true
      //      testCoverageEnabled = true
    }
    release {
      debuggable true
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
      signingConfig null
    }
  }

  project.android.libraryVariants.all { variant ->

    variant.productFlavors.each { flavor ->

      setVariantBuildConfigField(variant, project.apiOcm, API_URL, STRING)
      setVariantBuildConfigField(variant, project.ocmSdkVersion, OCM_SDK_VERSION, STRING)
      setVariantBuildConfigField(variant, project.concurrentInteractors,
          CONCURRENT_INTERACTORS, INT)
      setVariantBuildConfigField(variant, project.retrofitLog, RETROFIT_LOG, BOOLEAN)
      setVariantBuildConfigField(variant, project.youtubeDeveloperKey,
          YOUTUBE_DEVELOPER_KEY, STRING)
      setVariantBuildConfigField(variant, project.vimeoAccessToken,
          VIMEO_ACCESS_TOKEN, STRING)
      println("flavor: " + flavor)
      println("--**********************************************************--")
    }

    /* def bundleTask = tasks["bundle${name.capitalize()}"]
     artifacts {
       archives(bundleTask.archivePath) {
         classifier null
         builtBy bundleTask
       }
     }*/
  }

  lintOptions {
    quiet true
    abortOnError false
    ignoreWarnings true
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8 //this is 4 rx, no problem with ox 1_7
    targetCompatibility JavaVersion.VERSION_1_8
  }

  testOptions {
    unitTests.returnDefaultValues = true
  }


  flavorDimensions "ocm"

  productFlavors {
    ocm {
      dimension "ocm"
    }
  }


  //true to publish all flavour artifacts
  // publishNonDefault true
  defaultPublishConfig "ocmRelease"
  //defaultPublishConfig "ocmDebug"
  //defaultPublishConfig {"ocmRelease","ocmDebug","ocmStaging"}

  // publishNonDefault is deprecated and has no effect anymore. All variants are now published.
  // true to publish all flavour artifacts
  //publishNonDefault true
  //defaultPublishConfig "ocmStaging"
  //  defaultPublishConfig "ocmDebug"
  // default build flavour
  //defaultPublishConfig "ocmDebug"
}

jacocoAndroidUnitTestReport {
  excludes += ['**/BuildConfig*.*']
}

//configurations {
//  ocmReleaseImplementation
//  ocmStagingImplementation
//  ocmDebugImplementation
//}

if (android.productFlavors.size() > 0) {
  android.libraryVariants.all { variant ->
    // Publish a main artifact, otherwise the maven pom is not generated
    //if( variant.name == android.defaultPublishConfig ) {
    def bundleTask = tasks["bundle${name.capitalize()}"]
    artifacts {
      println('BUNDLE!' + bundleTask.archivePath)
      println('classifier!' + variant.name)
      println('builtBy!' + bundleTask.name)
      archives(bundleTask.archivePath) {
        classifier variant.name
        builtBy bundleTask
      }
    }
  }
  //}
}
//variant.name

task finalize {
  doFirst {
    tasks.assembleOcmDebug.execute()
    tasks.assembleOcmRelease.execute()
    tasks.assembleOcmStaging.execute()
  }

  println('finally!')
}
finalize.dependsOn(ocmsdk: install)
//install.finalizedBy(finalize)
install.dependsOn(ocmsdk: build)



dependencies {

  implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"

  //TEST
  testImplementation project.testLibraries.junit
  testImplementation project.testLibraries.mockito

  implementation fileTree(dir: 'libs', include: ['*.jar']) //youtube

  //google Support/CustomTabs/playServices
  implementation project.libraries.androidSupportDesign
  implementation project.libraries.androidCustomtabs

  implementation project.libraries.playServicesBase
  implementation project.libraries.playServicesLocation
  implementation project.libraries.playServicesGcm

  //gigigo Lib
  implementation project.libraries.ggglib
  implementation project.libraries.gggJavaLib

  //Dagger
  implementation project.libraries.dagger
  annotationProcessor project.libraries.daggerCompiler
  implementation project.libraries.loggingInterceptor

  //Image Loader Glide/Blur
  implementation project.libraries.imageloaderGlideBlur

  // ORCHEXTRA
  stagingImplementation project.libraries.oxCoreStaging
  debugImplementation project.libraries.oxCoreDebug
  releaseImplementation project.libraries.oxCoreRelease

  stagingImplementation project.libraries.oxGeofenceStaging
  debugImplementation project.libraries.oxGeofenceDebug
  releaseImplementation project.libraries.oxGeofenceRelease

  stagingImplementation project.libraries.oxIndoorpositioningStaging
  debugImplementation project.libraries.oxIndoorpositioningDebug
  releaseImplementation project.libraries.oxIndoorpositioningRelease

  stagingImplementation project.libraries.oxScannerStaging
  debugImplementation project.libraries.oxScannerDebug
  releaseImplementation project.libraries.oxScannerRelease

  implementation project.libraries.doubleViewPager
  implementation project.libraries.autofitTextView
  implementation project.libraries.multipleGridRecyclerView


  implementation project.libraries.rxAndroid
  implementation project.libraries.rxJava
  implementation project.libraries.rxRetrofit
  implementation project.libraries.arrow

  implementation project.libraries.kache


  implementation project.libraries.gpuImage //4 readarticles

  implementation project(':vimeosdk')

  //TEST
  testImplementation project.testLibraries.junit
  testImplementation project.testLibraries.assertj
  testImplementation project.testLibraries.mockito
}