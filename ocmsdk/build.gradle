apply plugin: 'com.android.library'
apply from: 'jacoco.gradle'
apply from: 'sonarqube.gradle'

apply from: 'common_methods.gradle'
apply from: 'dependencies.gradle'
apply plugin: 'me.tatarka.retrolambda'

apply plugin: 'com.github.dcendents.android-maven'

group = 'com.github.Orchextra'
version = 'ocmVersion'


apply from: 'variants.gradle'

def CONCURRENT_INTERACTORS = "CONCURRENT_INTERACTORS"
def RETROFIT_LOG = "RETROFIT_LOG"

def API_URL = "API_URL";
def OCM_SDK_VERSION = "OCM_SDK_VERSION";

def YOUTUBE_DEVELOPER_KEY = "YOUTUBE_DEVELOPER_KEY"

def VIMEO_ACCESS_TOKEN = "VIMEO_ACCESS_TOKEN"
android {
  compileSdkVersion project.androidCompileSdkVersion
  buildToolsVersion project.androidBuildToolsVersion

  defaultConfig {
    minSdkVersion project.androidMinSdkVersion
    targetSdkVersion project.androidTargetSdkVersion
    versionCode 1
    versionName "1.0"
    ndk {
      abiFilters "armeabi-v7a"
    }
    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
  }
  buildTypes {
    staging {
      debuggable true
      //      testCoverageEnabled = true
    }
    debug {
      debuggable true
      //      testCoverageEnabled = true
    }
    release {
      debuggable false
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
      signingConfig android.signingConfigs.debug
    }
  }

  project.android.libraryVariants.all { variant ->

    variant.productFlavors.each { flavor ->

      setVariantBuildConfigField(variant, project.apiOcm, API_URL, STRING)
      setVariantBuildConfigField(variant, project.ocmSdkVersion, OCM_SDK_VERSION, STRING)
      setVariantBuildConfigField(variant, project.concurrentInteractors,
          CONCURRENT_INTERACTORS, INT)
      setVariantBuildConfigField(variant, project.retrofitLog, RETROFIT_LOG, BOOLEAN)
      setVariantBuildConfigField(variant, project.youtubeDeveloperKey,
          YOUTUBE_DEVELOPER_KEY, STRING)
      setVariantBuildConfigField(variant, project.vimeoAccessToken,
          VIMEO_ACCESS_TOKEN, STRING)
      println("flavor: " + flavor)
      println("--**********************************************************--")
    }
  }

  lintOptions {
    quiet true
    abortOnError false
    ignoreWarnings true
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8 //this is 4 rx, no problem with ox 1_7
    targetCompatibility JavaVersion.VERSION_1_8
  }

  testOptions {
    unitTests.returnDefaultValues = true
  }

  flavorDimensions "ocm"

  productFlavors {
    ocm {
      dimension "ocm"
    }
  }
}

jacocoAndroidUnitTestReport {
  excludes += ['**/BuildConfig*.*']
}

configurations {
  ocmReleaseImplementation
  ocmStagingImplementation
  ocmDebugImplementation
}

if (android.productFlavors.size() > 0) {
  android.libraryVariants.all { variant ->
    def bundleTask = tasks["bundle${name.capitalize()}"]
    artifacts {
      println('BUNDLE!' + bundleTask.archivePath)
      println('classifier!' + variant.name)
      println('builtBy!' + bundleTask.name)
      archives(bundleTask.archivePath) {
        classifier variant.name
        builtBy bundleTask
      }
    }
  }
}

task finalize {
  doFirst {
    tasks.assembleOcmDebug.execute()
    tasks.assembleOcmRelease.execute()
    tasks.assembleOcmStaging.execute()
  }

  println('finally!')
}
finalize.dependsOn(ocmsdk: install)
//install.finalizedBy(finalize)
install.dependsOn(ocmsdk: build)

dependencies {
  //TEST
  testImplementation project.testLibraries.junit
  testImplementation project.testLibraries.mockito

  implementation fileTree(dir: 'libs', include: ['*.jar']) //youtube

  //google Support/CustomTabs/playServices
  implementation project.libraries.androidSupportDesign
  implementation project.libraries.androidCustomtabs

  implementation project.libraries.playServicesBase
  implementation project.libraries.playServicesLocation
  implementation project.libraries.playServicesGcm

  //gigigo Lib
  implementation project.libraries.ggglib
  implementation project.libraries.gggJavaLib

  //Dagger
  implementation project.libraries.dagger
  annotationProcessor project.libraries.daggerCompiler

  //Image Loader Glide/Blur
  api project.libraries.imageloaderGlideBlur

  implementation 'com.squareup.okhttp3:logging-interceptor:3.9.1'

  //Orchextra
  api 'com.gigigo.orchextra:core:3.0-RC2-S'
  api 'com.gigigo.orchextra:geofence:3.0-RC2-S'
  api 'com.gigigo.orchextra:indoorpositioning:3.0-RC2-S'
  api 'com.gigigo.orchextra:scanner:3.0-RC2-S'

  //customs Views
  implementation project.libraries.doubleViewPager
  implementation project.libraries.autofitTextView
  implementation project.libraries.multipleGridRecyclerView

  implementation project.libraries.rxAndroid
  implementation project.libraries.rxJava
  implementation project.libraries.rxRetrofit
  implementation project.libraries.arrow

  implementation project.libraries.kache

  api 'jp.co.cyberagent.android.gpuimage:gpuimage-library:1.4.1'

  api project(':vimeosdk')

  //TEST
  testImplementation project.testLibraries.junit
  testImplementation project.testLibraries.assertj
  testImplementation project.testLibraries.mockito
}