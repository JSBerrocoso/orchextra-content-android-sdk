apply plugin: 'com.android.library'
apply plugin: 'com.neenbedankt.android-apt'
apply from: 'jacoco.gradle'
apply from: 'sonarqube.gradle'

apply from: 'common_methods.gradle'
apply from: 'dependencies.gradle'
apply plugin: 'me.tatarka.retrolambda'

apply from: 'variants.gradle'

def CONCURRENT_INTERACTORS = "CONCURRENT_INTERACTORS"
def RETROFIT_LOG = "RETROFIT_LOG"

def API_URL = "API_URL";
def OCM_SDK_VERSION = "OCM_SDK_VERSION";

def YOUTUBE_DEVELOPER_KEY = "YOUTUBE_DEVELOPER_KEY"

android {
  compileSdkVersion project.androidCompileSdkVersion
  buildToolsVersion project.androidBuildToolsVersion

  defaultConfig {
    minSdkVersion project.androidMinSdkVersion
    targetSdkVersion project.androidTargetSdkVersion
    versionCode 1
    versionName "1.0"
    ndk {
      abiFilters "armeabi-v7a"
    }
    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
  }
  buildTypes {
    staging {
      debuggable true
      testCoverageEnabled = true
    }
    debug {
      debuggable true
      testCoverageEnabled = true
      //      testCoverageEnabled true
    }
    release {
      debuggable false
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
    }
  }

  project.android.libraryVariants.all { variant ->

    variant.productFlavors.each { flavor ->

      setVariantBuildConfigField(variant, project.apiOcm, API_URL, STRING)
      setVariantBuildConfigField(variant, project.ocmSdkVersion, OCM_SDK_VERSION, STRING)
      setVariantBuildConfigField(variant, project.concurrentInteractors,
          CONCURRENT_INTERACTORS, INT)
      setVariantBuildConfigField(variant, project.retrofitLog, RETROFIT_LOG, BOOLEAN)
      setVariantBuildConfigField(variant, project.youtubeDeveloperKey,
          YOUTUBE_DEVELOPER_KEY, STRING)

      println("--**********************************************************--")
    }
  }

  lintOptions {
    quiet true
    abortOnError false
    ignoreWarnings true
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  testOptions {
    unitTests.returnDefaultValues = true
  }

  productFlavors {
    ocm {}
  }

  // true to publish all flavour artifacts
  publishNonDefault true
  //  defaultPublishConfig "ocmDebug"
 defaultPublishConfig "ocmRelease"
}

jacocoAndroidUnitTestReport {
  excludes += ['**/BuildConfig*.*']
}

configurations {
  ocmStagingCompile
  ocmDebugCompile
  ocmReleaseCompile
}

dependencies {
  //TEST
  testCompile project.testLibraries.junit
  testCompile project.testLibraries.mockito

  compile fileTree(dir: 'libs', include: ['*.jar']) //youtube

  //google Support/CustomTabs/playServices
  compile project.libraries.androidSupportDesign
  compile project.libraries.androidCustomtabs

  compile project.libraries.playServicesBase
  compile project.libraries.playServicesLocation
  compile project.libraries.playServicesGcm

  //gigigo Lib
  compile project.libraries.ggglib
  compile project.libraries.gggJavaLib

  //Dagger
  apt project.libraries.daggerCompiler
  compile project.libraries.dagger

  //Image Loader Glide/Blur
  compile project.libraries.imageloaderGlideBlur

  //Orchextra
  compile project.libraries.oxvuforiaimplementation
  ocmStagingCompile(project.libraries.orchextrasdkStaging) { transitive = true }
  ocmDebugCompile(project.libraries.orchextrasdkDebug) { transitive = true }
  ocmReleaseCompile(project.libraries.orchextrasdkRelease) { transitive = true }

  //customs Views
  compile project.libraries.doubleViewPager
  compile project.libraries.autofitTextView
  compile project.libraries.multipleGridRecyclerView


  compile project.libraries.rxAndroid
  compile project.libraries.rxJava
  compile project.libraries.rxRetrofit
  compile project.libraries.arrow

  compile project.libraries.kache

  //TEST
  testCompile project.testLibraries.junit
  testCompile project.testLibraries.assertj
  testCompile project.testLibraries.mockito
}

