apply plugin: 'com.android.library'
apply from: 'jacoco.gradle'
apply from: 'sonarqube.gradle'

apply from: 'common_methods.gradle'
apply from: 'dependencies.gradle'
apply plugin: 'me.tatarka.retrolambda'

apply from: 'variants.gradle'

def CONCURRENT_INTERACTORS = "CONCURRENT_INTERACTORS"
def API_URL = "API_URL"
def NETWORK_LOG = "NETWORK_LOG"
def OCM_SDK_VERSION = "OCM_SDK_VERSION"
def YOUTUBE_DEVELOPER_KEY = "YOUTUBE_DEVELOPER_KEY"
def VIMEO_ACCESS_TOKEN = "VIMEO_ACCESS_TOKEN"

android {
  compileSdkVersion project.androidCompileSdkVersion
  buildToolsVersion project.androidBuildToolsVersion

  defaultConfig {
    minSdkVersion project.androidMinSdkVersion
    targetSdkVersion project.androidTargetSdkVersion
    versionCode 1
    versionName "1.0"
    ndk {
      abiFilters "armeabi-v7a"
    }
    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    buildConfigField STRING, VIMEO_ACCESS_TOKEN, project.vimeoAccessToken
    buildConfigField INT, CONCURRENT_INTERACTORS, project.concurrentInteractors
  }

  buildTypes {
    debug {
      debuggable true

      buildConfigField STRING, API_URL, '"https://cm.s.orchextra.io/"'
      buildConfigField STRING, OCM_SDK_VERSION, '"ANDROID_1.0.0"'
      buildConfigField STRING, YOUTUBE_DEVELOPER_KEY, project.youtubeDevelopKey
      buildConfigField BOOLEAN, NETWORK_LOG, "true"
    }

    quality {
      debuggable true

      buildConfigField STRING, API_URL, '"https://cm.q.orchextra.io/"'
      buildConfigField STRING, OCM_SDK_VERSION, '""'
      buildConfigField STRING, YOUTUBE_DEVELOPER_KEY, project.youtubeDevelopKey
      buildConfigField BOOLEAN, NETWORK_LOG, "true"
    }

    release {
      debuggable false
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

      buildConfigField STRING, API_URL, '"https://cm.orchextra.io/"'
      buildConfigField STRING, OCM_SDK_VERSION, '""'
      buildConfigField STRING, YOUTUBE_DEVELOPER_KEY, project.youtubeReleaseKey
      buildConfigField BOOLEAN, NETWORK_LOG, "false"
    }
  }

  lintOptions {
    quiet true
    abortOnError false
    ignoreWarnings true
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8 //this is 4 rx, no problem with ox 1_7
    targetCompatibility JavaVersion.VERSION_1_8
  }

  testOptions {
    unitTests.returnDefaultValues = true
  }
}

jacocoAndroidUnitTestReport {
  excludes += ['**/BuildConfig*.*']
}

dependencies {
  //TEST
  testCompile project.testLibraries.junit
  testCompile project.testLibraries.mockito

  compile fileTree(dir: 'libs', include: ['*.jar']) //youtube

  //google Support/CustomTabs/playServices
  compile project.libraries.androidSupportDesign
  compile project.libraries.androidCustomtabs

  compile project.libraries.playServicesBase
  compile project.libraries.playServicesLocation
  compile project.libraries.playServicesGcm

  //gigigo Lib
  compile project.libraries.ggglib
  compile project.libraries.gggJavaLib

  //Dagger
  compile project.libraries.dagger
  annotationProcessor project.libraries.daggerCompiler

  //Image Loader Glide/Blur
  compile project.libraries.imageloaderGlideBlur

  //Orchextra
  // compile project.libraries.oxvuforiaimplementation
  //  debugCompile(project.libraries.orchextrasdkStaging) { transitive = true }
  //  qualityCompile(project.libraries.orchextrasdkDebug) { transitive = true }
  //  releaseCompile(project.libraries.orchextrasdkRelease) { transitive = true }

  compile(project.libraries.orchextrasdkStaging) { transitive = true }

  //customs Views
  compile project.libraries.doubleViewPager
  compile project.libraries.autofitTextView
  compile project.libraries.multipleGridRecyclerView

  compile project.libraries.rxAndroid
  compile project.libraries.rxJava
  compile project.libraries.rxRetrofit
  compile project.libraries.arrow

  compile project.libraries.kache

  compile 'jp.co.cyberagent.android.gpuimage:gpuimage-library:1.4.1'

  compile project(':vimeosdk')

  //TEST
  testCompile project.testLibraries.junit
  testCompile project.testLibraries.assertj
  testCompile project.testLibraries.mockito
}
