apply plugin: 'com.android.library'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.github.dcendents.android-maven'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

//apply from: '../jacoco.gradle'
apply from: 'variants.gradle'

group = rootProject.ext.group
version = rootProject.ext.version

ext {
    bintrayRepo = 'maven'
    bintrayName = 'com.gigigo.ocm:content'

    publishedGroupId = 'com.gigigo.ocm'
    libraryName = 'Orchextra Content Manager'
    artifact = 'ocmsdk'

    libraryDescription = 'Orchextra Content Manager'

    siteUrl = 'https://github.com/Orchextra/orchextra-content-android-sdk'
    gitUrl = 'https://github.com/Orchextra/orchextra-content-android-sdk.git'

    libraryVersion = rootProject.ext.version
    buildType = "release"

    developerId = 'gigigo-desarrollo'
    developerName = 'Android Gigigo'
    developerEmail = 'gigigo.desarrollo@gmail.com'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}

def CONCURRENT_INTERACTORS = "CONCURRENT_INTERACTORS"
def RETROFIT_LOG = "RETROFIT_LOG"
def API_URL = "API_URL"
def OCM_SDK_VERSION = "OCM_SDK_VERSION"
def YOUTUBE_DEVELOPER_KEY = "YOUTUBE_DEVELOPER_KEY"
def VIMEO_ACCESS_TOKEN = "VIMEO_ACCESS_TOKEN"

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode generateAutoVersionCode()
        versionName version

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    packagingOptions {
        exclude 'lib/mips/*'
        exclude 'lib/mips64/*'
        exclude 'lib/x86/*'
        exclude 'lib/x86_64/*'
        exclude 'lib/armeabi/*'
        exclude 'lib/arm64-v8a/*'
    }

    buildTypes {
        debug {
            debuggable true

            version = "${rootProject.ext.version}-D"
            project.ext.libraryVersion = "${rootProject.ext.version}-D"
            project.ext.buildType = "debug"
        }
        quality {
            debuggable true

            version = "${rootProject.ext.version}-Q"
            project.ext.libraryVersion = "${rootProject.ext.version}-Q"
            project.ext.buildType = "quality"
        }
        release {
            debuggable false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'

            /**
             * This is set when you run the bintray plugin task deployDebugLib, deployQualityLib
             * and deployLib. This matters in ../gradle/pom.gradle to generate the proper pom.xml
             * with the dependencies because debugApi, qualityApi and releaseApi are not working
             * as expected. Those dependencies are not being added at all in the pom.xml.
             *
             * If you run the task from terminal or Android Studio, ext.buildType will be always
             * release, it will change when you run debugApi, qualityApi or releaseApi.
             *
             * Check the pom.gradle.
             */
            if (project.hasProperty('debug')) {
                version = "${rootProject.ext.version}-D"
                project.ext.libraryVersion = "${rootProject.ext.version}-D"
                project.ext.buildType = "debug"

            } else if (project.hasProperty('quality')) {
                version = "${rootProject.ext.version}-Q"
                project.ext.libraryVersion = "${rootProject.ext.version}-Q"
                project.ext.buildType = "quality"

            } else {
                version = "${rootProject.ext.version}"
                project.ext.libraryVersion = "${rootProject.ext.version}"
                project.ext.buildType = "release"
            }
        }
    }

    project.android.libraryVariants.all { variant ->
        variant.productFlavors.each { flavor ->
            setVariantBuildConfigField(variant, apiOcm, API_URL, STRING)
            setVariantBuildConfigField(variant, ocmSdkVersion, OCM_SDK_VERSION, STRING)
            setVariantBuildConfigField(variant, concurrentInteractors, CONCURRENT_INTERACTORS, INT)
            setVariantBuildConfigField(variant, retrofitLog, RETROFIT_LOG, BOOLEAN)
            setVariantBuildConfigField(variant, youtubeDeveloperKey, YOUTUBE_DEVELOPER_KEY, STRING)
            setVariantBuildConfigField(variant, vimeoAccessToken, VIMEO_ACCESS_TOKEN, STRING)
            println("flavor: " + flavor.name)
            println("variant: " + variant.name)
            println("--**********************************************************--")
        }
    }

    lintOptions {
        quiet true
        abortOnError false
        ignoreWarnings true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8 //this is 4 rx, no problem with ox 1_7
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    flavorDimensions "ocm"
    productFlavors {
        ocm {
            dimension "ocm"
        }
    }

    /* DO NOT REMOVE OR CHANGE
    * Check the note on release buildType.
    * */
    defaultPublishConfig "ocmRelease"
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar']) //youtube

    //google Support/CustomTabs/playServices
    implementation project.libraries.androidSupportDesign
    implementation project.libraries.androidCustomtabs

    implementation project.libraries.playServicesBase
    implementation project.libraries.playServicesLocation
    api project.libraries.playServicesGcm

    //gigigo Lib
    implementation project.libraries.ggglib
    implementation project.libraries.gggJavaLib

    //Dagger
    kapt project.libraries.daggerCompiler
    kapt project.libraries.daggerProcessor
    implementation project.libraries.dagger

    //Image Loader Glide/Blur
    implementation project.libraries.glide
    implementation project.libraries.glideTransformations

    /**
     * Orchextra api libraries
     *
     * They will be visible to other packages.
     * Check the note on release buildType.
     */
    debugApi project.libraries.oxCoreDebug
    qualityApi project.libraries.oxCoreQuality
    releaseApi project.libraries.oxCoreRelease

    debugApi project.libraries.oxGeofenceDebug
    qualityApi project.libraries.oxGeofenceQuality
    releaseApi project.libraries.oxGeofenceRelease

    debugApi project.libraries.oxIndoorpositioningDebug
    qualityApi project.libraries.oxIndoorpositioningQuality
    releaseApi project.libraries.oxIndoorpositioningRelease

    debugApi project.libraries.oxScannerDebug
    qualityApi project.libraries.oxScannerQuality
    releaseApi project.libraries.oxScannerRelease

    // Customs Views
    implementation project.libraries.doubleViewPager
    implementation project.libraries.autofitTextView
    implementation project.libraries.multipleGridRecyclerView
    implementation project.libraries.baserecycleradapter

    implementation project.libraries.rxAndroid
    implementation project.libraries.rxJava
    implementation project.libraries.rxRetrofit
    implementation project.libraries.arrow

    implementation project.libraries.kache
    implementation project.libraries.timber

    implementation project.libraries.kotlinStdLib
    implementation project.libraries.coroutinesCore
    implementation project.libraries.coroutinesAndroid

    kapt project.libraries.archLifecycleCompiler
    kapt project.libraries.archPersistenceCompiler
    implementation project.libraries.archLifecycleExtensions
    implementation project.libraries.archPersistenceRuntime
    implementation project.libraries.archPersistenceRxJava2

    implementation project.libraries.gpuImage //4 read articles
    implementation project.libraries.vimeoNetworking
    implementation project.libraries.retrofit
    implementation project.libraries.okhttp3
    implementation project.libraries.loggingInterceptor
    implementation project.libraries.exoplayer
    implementation project.libraries.zbar

    // Modules
    implementation project.modules.vimeo

    //TEST
    testImplementation project.libraries.archPersistenceTesting
    testImplementation project.testLibraries.junit
    testImplementation project.testLibraries.assertj
    testImplementation project.testLibraries.mockito
}

if (project.hasProperty('kapt')) {
    // Reference for 'kapt' DSL: https://kotlinlang.org/docs/reference/kapt.html#java-compiler-options
    // kotlin kapt bug in v1.3.50 https://youtrack.jetbrains.com/issue/KT-32804
    kapt {
        // we expect this closure to run over a org.jetbrains.kotlin.gradle.plugin.KaptExtension
        javacOptions {
            option("-source", "8")
            option("-target", "8")
        }
    }
}

apply from: '../gradle/pom.gradle'
apply from: 'https://raw.githubusercontent.com/nuuneoi/JCenter/master/bintrayv1.gradle'

