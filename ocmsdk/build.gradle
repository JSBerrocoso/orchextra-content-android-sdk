apply plugin: 'com.android.library'
apply from: 'jacoco.gradle'
apply from: 'sonarqube.gradle'

apply from: 'common_methods.gradle'
apply from: 'dependencies.gradle'
apply plugin: 'me.tatarka.retrolambda'

apply plugin: 'com.github.dcendents.android-maven'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

group = 'com.github.Orchextra'
version = 'ocmVersion'


apply from: 'variants.gradle'

def OCM_DIMENSION = "ocm"

def CONCURRENT_INTERACTORS = "CONCURRENT_INTERACTORS"
def RETROFIT_LOG = "RETROFIT_LOG"

def API_URL = "API_URL"
def OCM_SDK_VERSION = "OCM_SDK_VERSION"

def YOUTUBE_DEVELOPER_KEY = "YOUTUBE_DEVELOPER_KEY"

def VIMEO_ACCESS_TOKEN = "VIMEO_ACCESS_TOKEN"
android {
  compileSdkVersion project.androidCompileSdkVersion

  defaultConfig {
    minSdkVersion project.androidMinSdkVersion
    targetSdkVersion project.androidTargetSdkVersion
    versionCode 1
    versionName "1.0"

    configurations {
      compile.exclude group: "org.jetbrains", module: "annotations"
    }
    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    javaCompileOptions {
      annotationProcessorOptions {
        arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
      }
    }
  }

  packagingOptions {
    exclude 'lib/mips/*'
    exclude 'lib/mips64/*'
    exclude 'lib/x86/*'
    exclude 'lib/x86_64/*'
    exclude 'lib/armeabi/*'
    exclude 'lib/arm64-v8a/*'
  }

  buildTypes {
    staging {
      debuggable true
      //      testCoverageEnabled = true
    }
    debug {
      debuggable true
      //      testCoverageEnabled = true
    }
    release {
      debuggable true
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
      signingConfig null
    }
  }

  project.android.libraryVariants.all { variant ->

    variant.productFlavors.each { flavor ->

      setVariantBuildConfigField(variant, project.apiOcm, API_URL, STRING)
      setVariantBuildConfigField(variant, project.ocmSdkVersion, OCM_SDK_VERSION, STRING)
      setVariantBuildConfigField(variant, project.concurrentInteractors,
          CONCURRENT_INTERACTORS, INT)
      setVariantBuildConfigField(variant, project.retrofitLog, RETROFIT_LOG, BOOLEAN)
      setVariantBuildConfigField(variant, project.youtubeDeveloperKey,
          YOUTUBE_DEVELOPER_KEY, STRING)
      setVariantBuildConfigField(variant, project.vimeoAccessToken,
          VIMEO_ACCESS_TOKEN, STRING)
      println("flavor: " + flavor)
      println("--**********************************************************--")
    }

    /* def bundleTask = tasks["bundle${name.capitalize()}"]
     artifacts {
       archives(bundleTask.archivePath) {
         classifier null
         builtBy bundleTask
       }
     }*/
  }

  lintOptions {
    quiet true
    abortOnError false
    ignoreWarnings true
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8 //this is 4 rx, no problem with ox 1_7
    targetCompatibility JavaVersion.VERSION_1_8
  }

  testOptions {
    unitTests.returnDefaultValues = true
  }


  flavorDimensions OCM_DIMENSION

  productFlavors {
    ocm {
      dimension OCM_DIMENSION
    }
  }


  //true to publish all flavour artifacts
  // publishNonDefault true
  defaultPublishConfig "ocmRelease"
  //defaultPublishConfig "ocmDebug"
  //defaultPublishConfig {"ocmRelease","ocmDebug","ocmStaging"}

  // publishNonDefault is deprecated and has no effect anymore. All variants are now published.
  // true to publish all flavour artifacts
  //publishNonDefault true
  //defaultPublishConfig "ocmStaging"
  //  defaultPublishConfig "ocmDebug"
  // default build flavour
  //defaultPublishConfig "ocmDebug"
}

jacocoAndroidUnitTestReport {
  excludes += ['**/BuildConfig*.*']
}

//configurations {
//  ocmReleaseImplementation
//  ocmStagingImplementation
//  ocmDebugImplementation
//}

if (android.productFlavors.size() > 0) {
  android.libraryVariants.all { variant ->
    // Publish a main artifact, otherwise the maven pom is not generated
    //if( variant.name == android.defaultPublishConfig ) {
    def bundleTask = tasks["bundle${name.capitalize()}"]
    artifacts {
      println('BUNDLE!' + bundleTask.archivePath)
      println('classifier!' + variant.name)
      println('builtBy!' + bundleTask.name)
      archives(bundleTask.archivePath) {
        classifier variant.name
        builtBy bundleTask
      }
    }
  }
  //}
}
//variant.name

task finalize {
  doFirst {
    tasks.assembleOcmDebug.execute()
    tasks.assembleOcmRelease.execute()
    tasks.assembleOcmStaging.execute()
  }

  println('finally!')
}
finalize.dependsOn(ocmsdk: install)
//install.finalizedBy(finalize)
install.dependsOn(ocmsdk: build)

dependencies {

  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

  //TEST
  testImplementation project.testLibraries.junit
  testImplementation project.testLibraries.mockito

  implementation fileTree(dir: 'libs', include: ['*.jar']) //youtube

  //google Support/CustomTabs/playServices
  api project.libraries.androidSupportDesign
  api project.libraries.androidCustomtabs

  api project.libraries.playServicesBase
  api project.libraries.playServicesLocation
  api project.libraries.playServicesGcm

  //gigigo Lib
  api project.libraries.ggglib
  api project.libraries.gggJavaLib

  //Dagger
  kapt 'com.squareup:javapoet:1.8.0'
  //Dagger 2.2 bundles an older version of JavaPoet. Must explicitly add apt 'com.squareup:javapoet:1.7.0' before apt 'com.google.dagger:dagger-compiler:2.2' to fix this.
  implementation project.libraries.dagger
  kapt project.libraries.daggerCompiler

  //Image Loader Glide/Blur
  api project.libraries.imageloaderGlideBlur

  // ORCHEXTRA
  stagingImplementation project.libraries.oxCoreStaging
  debugImplementation project.libraries.oxCoreDebug
  releaseImplementation project.libraries.oxCoreRelease

  stagingImplementation project.libraries.oxGeofenceStaging
  debugImplementation project.libraries.oxGeofenceDebug
  releaseImplementation project.libraries.oxGeofenceRelease

  stagingImplementation project.libraries.oxIndoorpositioningStaging
  debugImplementation project.libraries.oxIndoorpositioningDebug
  releaseImplementation project.libraries.oxIndoorpositioningRelease

  stagingImplementation project.libraries.oxScannerStaging
  debugImplementation project.libraries.oxScannerDebug
  releaseImplementation project.libraries.oxScannerRelease

  // Customs Views
  api project.libraries.doubleViewPager
  api project.libraries.autofitTextView
  api project.libraries.multipleGridRecyclerView
  api project.libraries.baserecycleradapter

  api project.libraries.rxAndroid
  api project.libraries.rxJava
  api project.libraries.rxRetrofit
  api project.libraries.arrow

  api project.libraries.kache
  implementation project.libraries.timber

  implementation project.libraries.kotlinStdlib
  implementation project.libraries.coroutinesCore
  implementation project.libraries.coroutinesAndroid

  kapt project.libraries.archLifecycleCompiler
  kapt project.libraries.archPersistenceCompiler
  compile project.libraries.archLifecycleExtensions
  compile project.libraries.archPersistenceRuntime
  compile project.libraries.archPersistenceRxJava2
  testCompile project.libraries.archPersistenceTesting

  api project.libraries.gpuImage //4 readarticles

  api project.modules.vimeo

  //TEST
  testImplementation project.testLibraries.junit
  testImplementation project.testLibraries.assertj
  testImplementation project.testLibraries.mockito
}

